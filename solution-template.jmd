---
title: "BEE 4750/5750 Homework 4"
author: "Jing-Shan Hsu (jh2226)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1
The recycling rate is $37.75%$ and the ash fraction

## Problem 1.1
```julia
using JuMP
using Cbc
waste = Model(Cbc.Optimizer)
#cities
I = 1:2 
#disposal sites LF, MRF, and WTE
J = 1:3 


```
## Problem 1.2
```julia
#waste transporte from city i to disposal site j 
@variable(waste, W[i in I, j in J] >= 0)
#residual waste transported from  site k to  site j
@variable(waste, R[k in J, j in J] >= 0)
#operational status of disposal site j
@variable(waste, Y[j in J], Bin)
```
## Problem 1.3
LF = 1, MRF = 2, WTE = 3

```julia
@objective(waste, Min, sum([82.5 31.4875 95; 90 46.4875 87.5] .* W) +
    sum([0 0 77; 82.5 0 98; 0 0 0] .* R) + sum([2000; 1500; 2500] .* Y))

```
[2000; 1500; 2500] represents the fixed cost ($/d) that will depend on whether the faicility is operating or not

## Problem 1.4
```julia
#city 1 produces 100 Mg/day of solid waste, and city 2 produces 170 Mg/day of solid waste
city_out = [100; 170]

# mass-balance
@constraint(waste, city[i in I], sum(W[i,:]) == city_out[i])
@constraint(waste, wte, W[1,1] + W[2,1] + R[2,1] <= 150)
@constraint(waste, mrf, W[1,2] + W[2,2]  <= 350)
@constraint(waste, lf, W[1,3] + W[2,3] + R[2,3] + R[1,3] <= 200)
# residuals
@constraint(waste, resid1, R[1,3] == 0.1641 .* (W[1,1] + W[2,1] + R[2,1]))
@constraint(waste, resid2, R[2,1] + R[2,3] == 0.6225 .* (W[1,2] + W[2,2]))
@constraint(waste, resid3, sum(R[3,:]) == 0)
@constraint(waste, noresiddiag, sum(R[i, i] for i in I) == 0)
@constraint(waste, noresid, R[1,2] == 0)
# commitment
@constraint(waste, commit1, !Y[1] => {W[1,1] + W[2,1] + R[2,1] == 0})
@constraint(waste, commit2, !Y[2] => {W[1,2] + W[2,2] == 0})
@constraint(waste, commit3, Y[3] == 1)
```
## Problem 1.5
```julia
set_silent(waste)
optimize!(waste)
```
## Problem 1.6
```julia
round(objective_value(waste), digits = 3)
```
# Problem 2

## Problem 2.1
```julia
waste_carbon = Model(Cbc.Optimizer)
#cities
C = 1:2 
#disposal sites LF, MRF, and WTE
D = 1:3 
#waste transporte from city i to disposal site j 
@variable(waste_carbon, W[c in C, d in D] >= 0)
#residual waste transported from  site k to  site j
@variable(waste, R[b in D, d in D] >= 0)
#operational status of disposal site j
@variable(waste, Y[d in D], Bin)
```
## Problem 1.3
LF = 1, MRF = 2, WTE = 3

```julia
@objective(waste, Min, sum([82.5 31.4875 95; 90 46.4875 87.5] .* W) +
    sum([0 0 77; 82.5 0 98; 0 0 0] .* R) + sum([2000; 1500; 2500] .* Y))

```
[2000; 1500; 2500] represents the fixed cost ($/d) that will depend on whether the faicility is operating or not

## Problem 1.4
```julia
#city 1 produces 100 Mg/day of solid waste, and city 2 produces 170 Mg/day of solid waste
city_out = [100; 170]

# mass-balance
@constraint(waste, city[i in I], sum(W[i,:]) == city_out[i])
@constraint(waste, wte, W[1,1] + W[2,1] + R[2,1] <= 150)
@constraint(waste, mrf, W[1,2] + W[2,2]  <= 350)
@constraint(waste, lf, W[1,3] + W[2,3] + R[2,3] + R[1,3] <= 200)
# residuals
@constraint(waste, resid1, R[1,3] == 0.1641 .* (W[1,1] + W[2,1] + R[2,1]))
@constraint(waste, resid2, R[2,1] + R[2,3] == 0.6225 .* (W[1,2] + W[2,2]))
@constraint(waste, resid3, sum(R[3,:]) == 0)
@constraint(waste, noresiddiag, sum(R[i, i] for i in I) == 0)
@constraint(waste, noresid, R[1,2] == 0)
# commitment
@constraint(waste, commit1, !Y[1] => {W[1,1] + W[2,1] + R[2,1] == 0})
@constraint(waste, commit2, !Y[2] => {W[1,2] + W[2,2] == 0})
@constraint(waste, commit3, Y[3] == 1)
```
## Problem 1.5
```julia
set_silent(waste)
optimize!(waste)
```
## Problem 1.6
```julia
round(objective_value(waste), digits = 3)
## Problem 2.2

## Problem 2.3

# References