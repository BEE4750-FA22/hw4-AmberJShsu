---
title: "BEE 4750/5750 Homework 4"
author: "Jing-Shan Hsu (jh2226)"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
    term: false
    results: tex
    cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1

Calcuate the recycling rate and ash fraction by multipling the % of total mass with combustion ash (%) for ash fraction, and % of total mass with MRF Recycling rate (%) for recycling rate.
```julia
recycling = (15*0+40*35+5*15+3*10+2*0+5*30+18*40+4*60+2*75+2*80+1*50+3*0)/100;
ash = (15*8+40*7+5*5+3*10+2*15+5*2+18*2+4*100+2*100+2*100+1*100+3*70)/100;
```
The recycling rate is $37.75%$ and the ash fraction is $16.41%$

## Problem 1.2
```julia
using JuMP
using Cbc
waste = Model(Cbc.Optimizer)
#cities
I = 1:2 
#disposal sites WTE, MRF, and LF
J = 1:3 
```
I[1] = City 1
I[2] = City 2
J[1] = WTE
J[2] = MRF
J[3] = LF

The decision variables are the disposal site operation status, residual waste transported as a function of disposal sites k, and the waste transported from city to the disposal site.
```julia
#waste transport from city i to disposal site j 
@variable(waste, W[i in I, j in J] >= 0)
#residual waste transported from  site k to  site j
@variable(waste, R[k in J, j in J] >= 0)
#operational status of disposal site j
@variable(waste, Y[j in J], Bin)
```
## Problem 1.3
The objective function is calculated as a combination of facility cost and transportation cost.
Facility Costs:
WTE = 2500Y[1] + 60(W[1,1] + W[2,1] + R[2,1])
MRF = 1500Y[2] + 7(W[1,2] + W[2,2]) + 45(0.3775)(W[1,2] + W[2,2])
LF = 2000Y[3] + 50(W[1,3] + W[2,3] + R[2,3] + R[1,3])

Transportation costs:
1.5(15W[1,1] + 20W[2,1] + 5W[1,2] + 15W[2,2] + 30W[1,3] + 25W[2,3] + 18R[1,3] + 15R[2,1] + 32R[2,3])

Fixed Cost:
[2000; 1500; 2500] represents the fixed cost ($/d) corresponds to the facility, and the values depend on whether the faicility is operating or not

```julia
@objective(waste, Min, sum([82.5 31.4875 95; 90 46.4875 87.5] .* W) +
    sum([0 0 77; 82.5 0 98; 0 0 0] .* R) + sum([2000; 1500; 2500] .* Y))

```


## Problem 1.4
```julia
#city 1 produces 100 Mg/day of solid waste, and city 2 produces 170 Mg/day of solid waste
city_out = [100; 170]

# all waste produced must be within the facility's capacities
@constraint(waste, city[i in I], sum(W[i,:]) == city_out[i])
@constraint(waste, wte, W[1,1] + W[2,1] + R[2,1] <= 150)
@constraint(waste, mrf, W[1,2] + W[2,2]  <= 350)
@constraint(waste, lf, W[1,3] + W[2,3] + R[2,3] + R[1,3] <= 200)

# residuals of waste must equal to the ash produced in LF
@constraint(waste, resid1, R[1,3] == 0.1641 .* (W[1,1] + W[2,1] + R[2,1]))
# residuals of waste must equal to the amount of waste after recycling 
@constraint(waste, resid2, R[2,1] + R[2,3] == 0.6225 .* (W[1,2] + W[2,2]))
@constraint(waste, resid3, sum(R[3,:]) == 0)
@constraint(waste, noresiddiag, sum(R[i, i] for i in I) == 0)
@constraint(waste, noresid, R[1,2] == 0)

# binary variable of facility's operating (on/off) status to limit fixed cost
@constraint(waste, commit1, !Y[1] => {W[1,1] + W[2,1] + R[2,1] == 0})
@constraint(waste, commit2, !Y[2] => {W[1,2] + W[2,2] == 0})
@constraint(waste, commit3, Y[3] == 1)
```
## Problem 1.5
```julia
set_silent(waste)
optimize!(waste)
```
## Problem 1.6
```julia
round(objective_value(waste), digits = 3)
value.(Y)
value.(W)
value.(R)
```
The optimal objective value is $28886.364$, which is 28886.364 dollars/day.
Accoding to the Y matrix where Y[2] = 0, facility 2, MRF, will not be used.
![Waste Flow Diagram](IMG_1191.png))


# Problem 2

## Problem 2.1
The objective function would need to be changed, since the tipping fee for the WTE facility 
increased to $75/Mg and the transportation cost also increased to $2/Mg-km.

```julia
waste_carbon = Model(Cbc.Optimizer)
#cities
C = 1:2 
#disposal sites WTE, MRF, and LF
D = 1:3 
#waste transporte from city c to disposal site d
@variable(waste_carbon, Wc[c in C, d in D] >= 0)
#residual waste transported from site b to  site d
@variable(waste_carbon, Rc[b in D, d in D] >= 0)
#operational status of disposal site d
@variable(waste_carbon, Yc[d in D], Bin)
```
The objective function is calculated as a combination of facility cost and transportation cost.
Facility Costs:
WTE = 2500Yc[1] + 75(Wc[1,1] + Wc[2,1] + Rc[2,1])
MRF = 1500Yc[2] + 7(Wc[1,2] + Wc[2,2]) + 45(0.3775)(Wc[1,2] + Wc[2,2])
LF = 2000Yc[3] + 50(Wc[1,3] + Wc[2,3] + Rc[2,3] + Rc[1,3])

Transportation costs:
2(15Wc[1,1] + 20Wc[2,1] + 5Wc[1,2] + 15Wc[2,2] + 30Wc[1,3] + 25Wc[2,3] + 18Rc[1,3] + 15Rc[2,1] + 32Rc[2,3])

Fixed Cost:
[2000; 1500; 2500] represents the fixed cost ($/d) corresponds to the facility, and the values depend on whether the faicility is operating or not

```julia
@objective(waste_carbon, Min, sum([105 33.9875 110; 9 53.9875 100] .* Wc) +
    sum([0 0 86; 105 0 104; 0 0 0] .* Rc) + sum([2000; 1500; 2500] .* Yc))

#city 1 produces 100 Mg/day of solid waste, and city 2 produces 170 Mg/day of solid waste
city_produc = [100; 170]

# all waste produced must be within the facility's capacities
@constraint(waste_carbon, city[c in C], sum(Wc[c,:]) == city_produc[c])
@constraint(waste_carbon, wte, Wc[1,1] + Wc[2,1] + Rc[2,1] <= 150)
@constraint(waste_carbon, mrf, Wc[1,2] + Wc[2,2]  <= 350)
@constraint(waste_carbon, lf, Wc[1,3] + Wc[2,3] + Rc[2,3] + Rc[1,3] <= 200)

# residuals of waste must equal to the ash produced in LF
@constraint(waste_carbon, resid1, Rc[1,3] == 0.1641 .* (Wc[1,1] + Wc[2,1] + Rc[2,1]))
# residuals of waste must equal to the amount of waste after recycling 
@constraint(waste_carbon, resid2, Rc[2,1] + Rc[2,3] == 0.6225 .* (Wc[1,2] + Wc[2,2]))
@constraint(waste_carbon, resid3, sum(Rc[3,:]) == 0)
@constraint(waste_carbon, noresiddiag, sum(Rc[c, c] for c in C) == 0)
@constraint(waste_carbon, noresid, Rc[1,2] == 0)

# binary variable of facility's operating (on/off) status to limit fixed cost
@constraint(waste_carbon, commit1, !Yc[1] => {Wc[1,1] + Wc[2,1] + Rc[2,1] == 0})
@constraint(waste_carbon, commit2, !Yc[2] => {Wc[1,2] + Wc[2,2] == 0})
@constraint(waste_carbon, commit3, Yc[3] == 1)
```
## Problem 2.2
```julia
set_silent(waste_carbon)
optimize!(waste_carbon)
```

## Problem 2.3

```julia
round(objective_value(waste_carbon), digits = 3)
value.(Yc)
value.(Wc)
value.(Rc)
```
The optimal objective value is $20966.89$, and the flows of waste is represented in the diagram below.

![Waste Flow Diagram with Carbon Tax](IMG_1192.png)
# References
Lecture 15